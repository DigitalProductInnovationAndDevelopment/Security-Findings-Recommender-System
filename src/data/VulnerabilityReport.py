from tqdm import tqdm

from src.data.Finding import Finding


class VulnerabilityReport:
    def __init__(self):
        self.findings = []

    def add_finding(self, finding):
        self.findings.append(finding)

    def get_findings(self):
        return self.findings

    def add_category(self):
        for finding in tqdm(self.findings):
            finding.add_category()
        return self

    def add_solution(self, long=True, short=True, search_term=True):
        for finding in tqdm(self.findings):
            finding.generate_solution(long, short, search_term)
        return self

    def sort(self, by: str = 'severity', reverse: bool = True):
        """
        This function sorts the findings by severity or priority.
        :param reverse:  Whether to sort in reverse order.
        :param by: The key to sort by. Options are 'severity' or 'priority'.
        :return: The sorted VulnerabilityReport object.
        """
        if by == 'severity':
            self.findings.sort(key=lambda x: x.severity, reverse=reverse)
        elif by == 'priority':
            self.findings.sort(key=lambda x: x.priority, reverse=reverse)
        else:
            raise ValueError(f"Invalid sorting key: {by}. Options are 'severity' or 'priority'.")

        return self

    def to_dict(self):
        return [f.to_dict() for f in self.findings]

    def __str__(self):
        return "\n\n".join([str(f) for f in self.findings])

    def to_html(self, table=False):
        return "".join([f.to_html(table) for f in self.findings])


def create_from_flama_json(json_data) -> VulnerabilityReport:
    """
    This function creates a VulnerabilityReport object from a JSON object.
    :param json_data: The Flama export, either top-level or nested in a 'message' key.
    :return: a new and shiny VulnerabilityReport object.
    """

    if 'message' in json_data:
        json_data = json_data['message']['content']

    vulnerability_report = VulnerabilityReport()

    for d in json_data[:10]:  # TODO: remove the slicing
        title = [x['element'] for x in d['title_list']]
        source = set([x['source'] for x in d['title_list']])
        description = [x['element'] for x in d.get('description_list', [])]
        cwe_ids = [", ".join(x['element']) for x in d.get('cwe_id_list', [])]
        cve_ids = [x['element'] for x in d.get('cve_id_list', [])] if 'cve_id_list' in d else []
        severity = d.get('severity', None)
        priority = d.get('priority', None)

        finding = Finding(title, source, description, cwe_ids, cve_ids, severity, priority)
        vulnerability_report.add_finding(finding)
    return vulnerability_report
