from typing import List

from data.Finding import Finding
from pydantic import BaseModel


class AggregatedSolution(BaseModel):
    """
    AggregatedSolution class to store the aggregated findings and solution generated by the LLM.

    Args:
        findings (List[Finding]): List of findings.
        solution (str): Aggregated solution.
        metadata (dict): Additional metadata
    """
    findings: List[Finding] = None
    solution: str = ""
    metadata: dict = {}

    def from_result(self, findings: List[Finding], solution: str, metadata=None):
        """
        Initialize the AggregatedSolution with the provided findings, solution, and metadata.
        :param findings: A list of findings.
        :param solution: The aggregated solution.
        :param metadata:  Additional metadata.
        :return:
        """
        self.findings = findings
        self.solution = solution
        self.metadata = metadata
        return self

    def __str__(self):
        return self.solution

    def to_dict(self):
        return {
            "findings": [finding.to_dict() for finding in self.findings],
            "solution": self.solution,
            "metadata": self.metadata,
        }

    def to_html(self):
        return f"<p>{self.solution}</p>"
