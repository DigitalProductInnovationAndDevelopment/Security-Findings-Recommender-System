import json
from typing import Dict, Any, Union, List


def custom_parse_object(pairs: List[tuple]) -> Dict[str, Any]:
    """
    Custom object pairs hook for handling parsing errors gracefully.

    Args:
        pairs: List of key-value pairs from the JSON object.

    Returns:
        Dictionary representing the parsed JSON object.
    """
    result = {}
    for key, value in pairs:
        if key in result:
            if isinstance(result[key], list):
                result[key].append(value)
            else:
                result[key] = [result[key], value]
        else:
            result[key] = value
    return result


def parse_json(json_string: str, strict: bool = False) -> Union[Dict[str, Any], None]:
    """
    Parse JSON data and handle parsing errors gracefully. This can be helpful when dealing with JSON generated by LLMs.

    Args:
        json_string: JSON data as a string.
        strict: Whether to parse the JSON data strictly.

    Returns:
        Parsed JSON data as a dictionary, or None if parsing fails.
    """
    try:
        return json.loads(json_string, strict=strict)
    except json.JSONDecodeError as e:
        try:
            decoder = json.JSONDecoder(object_pairs_hook=custom_parse_object)
            return decoder.decode(json_string)
        except json.JSONDecodeError as e:
            print(f"Failed to parse JSON: {str(e)}")
            return None
